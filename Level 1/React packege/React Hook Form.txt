1. install react hook packege -------------------------------------------
    npm install react-hook-form

2. Flow all instractions  and implement in signup page ------------------
    const { register, handleSubmit, formState: { errors }} = useForm();
    const {createUser} = useContext(AuthContext)


    const onSubmit = (data) => {
        console.log(data);
        createUser(data.email, data.password)
        .then(result => {
            const loggedUser = result.user;
            console.log(loggedUser);
        })
    }

    <form  onSubmit={handleSubmit(onSubmit)} className="card-body">
        <div className="form-control">
             <label className="label">
                 <span className="label-text">Name</span>
             </label>
             <input type="text" {...register("name", { required: true})}placeholder="name" className="input input-bordered" />
             {errors.name && <span className=" text-red-500">This field is required</span>}
         </div>
         <div className="form-control">
             <label className="label">
                 <span className="label-text">Email</span>
             </label>
             <input type="email" {...register("email",  { required: true})} name="email" placeholder="email" className="input input-bordered" />
              {errors.email && <span className=" text-red-500">email field is required</span>}
         </div>
         <div className="form-control">
             <label className="label">
                 <span className="label-text">Password</span>
             </label>
             <input type="password"  {...register("password",  { 
                 required: true, 
                 maxLength: 20,
                 minLength: 6,
                 pattern:  /(?=.*[A-Z])(?=.*[!@#$&*])(?=.*[0-9])(?=.*[a-z])/         
                 })} name="password" placeholder="password" className="input input-bordered" />
                 {errors.password?.type === 'required' && <span className=" text-red-500">password field is required</span>}
                 {errors.password?.type === 'maxLength' && <span className=" text-red-500">password must be less then 20</span>}
                 {errors.password?.type === 'minLength' && <span className=" text-red-500">password must be greather then 6</span>}
                 {errors.password?.type === 'pattern' && <span className=" text-red-500"> invalided password</span>}
          </div>
          <div className="form-control mt-6">
                <input className="btn btn-primary" type="submit" value="sign up" />
          </div>
    </form>
