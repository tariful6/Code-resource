Privateroute ========================================================================
  Privateroute work for make secure client side data. and also help us to solve reload  
  problem and making dynamic path.

1.PrivateRoute.jsx code -----------------------------------------------------------
    import { useContext } from "react";
    import { AuthContext } from "../Provider/AuthProvider";
    import { Navigate, useLocation } from "react-router-dom";

    const PrivateRoute = ({children}) => {
      const {user, loading} = useContext(AuthContext);
      const location = useLocation();
      console.log(location.pathname);

      if(loading){
         return <h1 className=" text-red-400 text-4xl text-center py-10">Loading...</h1>
      }

      if(user?.email){
        return children;
      }
      return <Navigate to="/signIn" state={{from: location}} replace></Navigate>;
    };
    export default PrivateRoute;


2.Apply Private Route in route.jsx component.jsx code -------------------------------
     {
         path: "services/:id",
         element: <PrivateRoute><ServiceDetails></ServiceDetails></PrivateRoute>,
         loader: ({params}) => fetch(`http://localhost:5000/services/${params.id}`)
     },
     {
         path: 'bookings',
         element: <PrivateRoute><Bookings></Bookings></PrivateRoute>
     }

3.Apply dynamic route in in login.jsx -------------------------------
    const {signInWithEmail} = useContext(AuthContext);
    const location = useLocation(); // for get path locattion.
    const navigate = useNavigate(); // for navigate path.
    const from = location.state?.from?.pathname || '/';

    const handleSignIn = e => {
        e.preventDefault();
        const form = e.target;
        const email = form.email.value;
        const password = form.password.value;
        signInWithEmail(email, password)
        .then(result => {
            const user = result.user;
            console.log(user);
            navigate(from, { replace: true }) // apply form in navigate.
        })
        .catch(err => console.log(err))
    }

Jwt ========================================================================
  Jwt json web token work for make secure server side data.
  jwt -- json web token
  Authentication means -------------------
       - who are you. give - user password
  Authorization--------- -----------------
       - whhat you can do
       - add photo , delete photo , view photo
       - give different power role

  we can store jwt in two places :
       - Memory -
       - local storage -
       - browser http cookie - little bit secure from local storage.

  3 type of structure of jwt :
	- HEADER
	- PAYLOAD
	- SIGNATURE

  token have two layer :
	- Access Token 
	- Refresh Token


  For use jwt token ------------------------------
    1. install jwt packege in server side in bash.
	npm install jsonwebtoken
    
    2. reqire jwt using this --------------------
	const jwt = require('jsonwebtoken')  // add this in top, user cors require. 

    3. make post api for jwt ----------------------     
	app.post('/jwt', async (req, res) => {
            const user = req.body;
                console.log(user);
                const token = jwt.sign(user, "secret", {expiresIn: "1h"}) // make jwt token.
             res.send(token);
        })


    5.insert those commens in server side bash  --------------------------------
          - node 
          - require('crypto').randomBytes(64).toString('hex')

    6. Copy all data from bash without quotation -----------------------------------
          - Make  ACCESS_TOKEN_SECRET in .env file and pass all bash data in --  ACCESS_TOKEN_SECRET 
             Example: ACCESS_TOKEN_SECRET = 4d07dfd4caeb6f7f798ca2134434d47415e85d4f034dfb6269b14da0d54f

          - Add this - process.env.ACCESS_TOKEN_SECRET - in jwt sign in auth post api. 
             Example: const token = jwt.sign(user, process.env.ACCESS_TOKEN_SECRET, {expiresIn: "1h"})


    7. install cookie-parser for store token in cookie -------------------
         - npm install cookie-parser

    8. require cookie parser and use it as a middleware ------------
         - const cookieParser = require('cookie-parser') // use it after jwt require.
         - app.use(cookieParser()) // use it as a middleware after > express.json()

    9. do config cors -----------------------------------------
         app.use(cors({
            origin:["http://localhost:5173"],
            credentials: true
         }))
              

    10. do config or modify previous post api  -----------------------------------------

        app.post('/jwt', async (req, res) => {
           const user = req.body;
           console.log(user);
           // make jwt token from here------
           const token = jwt.sign(user, process.env.ACCESS_TOKEN_SECRET, {expiresIn: "1h"})
            // res.cookie().send() ------
          res
          .cookie('token', token,{
            httpOnly : true,
            secure: false, // false for anly http website.
          })
        .send({success: true})
        })


   04. for bring jwt token from server side to client side for login use those ------------------
       - npm install axios  // add this packege in client side.

      const handleSignIn = e => {
        e.preventDefault();
        const form = e.target
        const email = form.email.value
        const password = form.password.value
        console.log(email, password);
        signInUser(email, password)
        .then(res => {
            const loggedInUser = res.user
            console.log(loggedInUser);
            const user = {email};

        // For get access token ------ use withCredentials there where data you want to make secure.--
            axios.post('http://localhost:5000/jwt', user, {withCredentials: true})
            .then(res => {
                console.log(res.data);
                if(res.data.success){
                     navigate(location?.state ? location?.state : "/")
                }
            })

        })
        .catch(err => console.error(err))   
    }


   11. for bring jwt token from client side normal jsx to server side - use those ------------------
      (1) client side code for send token --------------
           --- load spasific data base on email .
           const url = `http://localhost:5000/bookings?email=${user.email}`;
           useEffect(()=> {
             // fetch(url, {credentials: 'includes'}) // if you use fatch use this.
             //  .then(res => res.json())
             //  .then(data => setBookings(data))

               axios.get(url, {withCredentials: true})  // before use credenttial use cookie parcher.
              .then(res => setBookings(res.data))
            },[url])

     (2) server side code for send token ----------------------------------------------------------
         app.get('/bookings', async(req, res)=>{
             console.log(req.query.email);
             console.log("see token fot test", req.cookies.token); // for see token server side.
             let query = {}
             if(req.query?.email){
               query = {email: req.query.email}
             }
             const cursor = bookingCollection.find()
             const result = await cursor.toArray()
             res.send(result)
         })

   12. create varified token and access token for verified user------------------------------------ 
     (A) Add this in server side as a middleware under MongoClient : ------------------------------- 
           const logger = async (req, res, next) => {  
             console.log("called:", req.host, req.originalUrl);
             next();
           };
 
         const verifyToken = async (req, res, next) => {  // for verify user.
         const token = req.cookies?.token;
           console.log("value of token in middleware:", token);
           if (!token) {
             return res.status(401).send({ message: "not authorized" });
           }
           jwt.verify(token, process.env.ACCESS_TOKEN_SECRET, (err, decoded) => {
             if (err) {
               console.log(err);
             return res.status(401).send({ message: "unauthorized" });
           }
           console.log("value in the token:", decoded);
           req.user = decoded;
           next();
           });
        };


    (B) use those in Client side in Authprovider jsx --------------------------------------

        useEffect(() => {
           const unSubscribe = onAuthStateChanged(auth, currentUser => {
             const userEmail = currentUser?.email || user?.email;
             const loggedUser = {email : userEmail};
             setUser(currentUser)
             setLoading(false)
             console.log('observing current user', currentUser);

             if (currentUser){
                axios.post('http://localhost:5000/jwt', loggedUser, {withCredentials : true})
                .then(res => {
                    console.log("token respons",res.data);
                })
             }
             else{
                axios.post('http://localhost:5000/logout',loggedUser,{ withCredentials : true})
                .then(res => {
                    console.log("logout respons",res.data);
                })
              }
          });
          return () => {
            return unSubscribe()
          }
        },[])

    (B) use those in server side api appy that api what you want to make secure ----------------
         app.post("/jwt", logger, async (req, res) => {
           const user = req.body;
           console.log(user);
           const token = jwt.sign(user, process.env.ACCESS_TOKEN_SECRET, {
           expiresIn: "1h",
         });
         res
         .cookie("token", token, {
            httpOnly: true,
            secure: false,
         })
         .send({ success: true });
         });


         app.post("/logout", async (req, res) => {
           const user = req.body;
           console.log("loging out", user);
           res.clearCookie("token", { maxAge: 0 }).send({ success: true });
         });


   13.Load email spasificdata : using queery and token,
      app.get("/bookings", logger, verifyToken, async (req, res) => {
         console.log(req.query.email);
         // console.log("tik tok token", req.cookies.token);
         console.log("for valid token", req.user);
         if (req.query.email !== req.query.email) {
           return res.status(403).send({ message: "forbidden access" });
         }
         let query = {};
         if (req.query?.email) {
            query = { email: req.query.email };
         }
         const result = await bookingCollection.find().toArray();
         res.send(result);
         });


    14. Axios Interceptor use with custom hooks ------------------------
          (a) make a custom hook give name useAxiosSecure.jsx
	  (b) add those care here ------------------------------------

	      import axios from "axios";
	      import { useContext, useEffect } from "react";
	      import { AuthContext } from "../Provider/AuthProvider";
              import { useNavigate } from "react-router-dom";

              const axiosSecure = axios.create({
                 baseURL: 'http://localhost:5000',
                 withCredentials: true
              })

              const useAxiosSecure = () => {
              const {logOut} = useContext(AuthContext);
              const navigate = useNavigate();
              useEffect(()=> {
                 axiosSecure.interceptors.response.use( res => {
                    return res;
                 }, error => {
                 console.log('error tracked in the interceptor',error.response);
                 if(error.response.status === 401 || error.response.status === 403 ) {
                    console.log("log out the user");
                    logOut()
                    .then(() =>{
                     navigate('/signIn')
                   })
                   .catch(error => console.log(error)) 
                   }
                 })
                },[])
              return axiosSecure;
             };
           export default useAxiosSecure;

	  (c) add those as a alter native of fatch or axios in -- secure component. Ex : bookings --------
              const axiosSecure = useAxiosSecure();
              const url = `/bookings?email=${user.email}`;
              useEffect(()=> {
                axiosSecure.get(url) 
               .then(res => setBookings(res.data))
             },[url, axiosSecure])


   14. make custom hooks for get data easily------------------------
       import { useEffect, useState } from "react";
       const useService = () => {
         const[service, setService] = useState([])
         useEffect(()=> {
           fetch('http://localhost:5000/services')
           .then(res => res.json())
           .then(data => setService(data))
           }, [])
         return service;
       };
      export default useService;

   14. get data to do import custom hook------------------------
         const services = useService()









                             
      